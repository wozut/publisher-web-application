#!/bin/bash

# Pre-push hook that runs quality checks only when pushing to main branch

# Start timing
start_time=$(date +%s)

required_node_version="22.21.0"

# Function to format execution time
format_execution_time() {
    local total_seconds=$1
    local minutes=$((total_seconds / 60))
    local seconds=$((total_seconds % 60))

    if [ $minutes -gt 0 ]; then
        echo "${minutes}m ${seconds}s"
    else
        echo "${seconds}s"
    fi
}

protected_branch='main'
current_branch=$(git rev-parse --abbrev-ref HEAD)

# Only run checks if pushing to main branch
if [ "$current_branch" = "$protected_branch" ]; then
    echo "üîç Running pre-push checks for main branch..."

    # Check if there are commits to push
    echo "üìä Checking if there are commits to push..."
    git fetch origin "$protected_branch" --quiet
    commits_to_push=$(git rev-list --count origin/"$protected_branch"..HEAD)

    if [ "$commits_to_push" -eq 0 ]; then
        echo "‚ÑπÔ∏è  No commits to push. Skipping pre-push checks."
        end_time=$(date +%s)
        execution_time=$((end_time - start_time))
        echo "‚è±Ô∏è  Execution time: $(format_execution_time $execution_time)"
        exit 0
    fi

    echo "üìù Found $commits_to_push commit(s) to push. Continuing with checks..."

    # Check if branch is up-to-date with remote
    echo "üåê Checking if branch is up-to-date with remote..."
    git fetch origin "$protected_branch" --quiet

    # Check if there are commits on remote that we don't have locally
    behind_count=$(git rev-list --count HEAD..origin/"$protected_branch")

    if [ "$behind_count" -gt 0 ]; then
        echo "‚ùå Branch is $behind_count commit(s) behind origin/$protected_branch. Please pull latest changes first."
        end_time=$(date +%s)
        execution_time=$((end_time - start_time))
        echo "‚è±Ô∏è  Execution time: $(format_execution_time $execution_time)"
        exit 1
    fi
    echo "‚úÖ Branch is up-to-date with remote"

    # Check Node version
    echo "üîß Checking Node version..."
    current_node_version=$(node -v | sed 's/v//')
    if [ "$current_node_version" != "$required_node_version" ]; then
        echo "‚ùå Node version mismatch. Required: $required_node_version, Current: $current_node_version"
        echo "   Please run: nvm use $required_node_version"
        end_time=$(date +%s)
        execution_time=$((end_time - start_time))
        echo "‚è±Ô∏è  Execution time: $(format_execution_time $execution_time)"
        exit 1
    fi
    echo "‚úÖ Node version correct ($current_node_version)"

    # Install dependencies
    echo "üì¶ Installing dependencies..."
    if ! npm ci; then
        echo "‚ùå Dependency installation failed. Please check your package.json and package-lock.json."
        end_time=$(date +%s)
        execution_time=$((end_time - start_time))
        echo "‚è±Ô∏è  Execution time: $(format_execution_time $execution_time)"
        exit 1
    fi
    echo "‚úÖ Dependencies installed"

    # Run build
    echo "üî® Building application..."
    if ! npm run build; then
        echo "‚ùå Build failed. Please fix build errors before pushing."
        end_time=$(date +%s)
        execution_time=$((end_time - start_time))
        echo "‚è±Ô∏è  Execution time: $(format_execution_time $execution_time)"
        exit 1
    fi
    echo "‚úÖ Build successful"
    
    # Run tests
    echo "üß™ Running tests..."
    if ! npm run test; then
        echo "‚ùå Tests failed. Please fix failing tests before pushing."
        end_time=$(date +%s)
        execution_time=$((end_time - start_time))
        echo "‚è±Ô∏è  Execution time: $(format_execution_time $execution_time)"
        exit 1
    fi
    echo "‚úÖ All tests passed"
    
    echo "üéâ All pre-push checks passed! Push to main allowed."

    # Show execution time for successful run
    end_time=$(date +%s)
    execution_time=$((end_time - start_time))
    echo "‚è±Ô∏è  Execution time: $(format_execution_time $execution_time)"
else
    echo "‚ÑπÔ∏è  Skipping pre-push checks (not pushing to main branch)"

    # Show execution time for skipped checks
    end_time=$(date +%s)
    execution_time=$((end_time - start_time))
    echo "‚è±Ô∏è  Execution time: $(format_execution_time $execution_time)"
fi
